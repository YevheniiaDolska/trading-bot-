#!/usr/bin/env python3
import os
import subprocess
import sys
import time
import requests
import shutil

# -----------------------------------------------------------------------------
# 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –∏ –º–æ–¥–µ–ª–µ–π
# -----------------------------------------------------------------------------

# POD_ID –∏ RUNPOD_API_KEY –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–º (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
POD_ID = "2rym4rcubd26lu"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π POD_ID
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ Windows –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
BASE_LOCAL_DIR = r"C:\Users\Kroha\Documents\trading-models\Ready"
NEURAL_NETWORKS_DIR = os.path.join(BASE_LOCAL_DIR, "neural_networks")
ENSEMBLE_MODELS_DIR = os.path.join(BASE_LOCAL_DIR, "ensemble_models")

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ RunPod
RUNPOD_SAVE_DIR = "/workspace/saved_models"

# –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Ä—è–¥–∫–æ–º –∑–∞–ø—É—Å–∫–∞: –∫–ª—é—á ‚Äì –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
# –ü–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ (Python 3.7+) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
MODELS = {
    "market_condition_classifier.py": "Market_Classifier",
    "bullish_neural_network.py": "Neural_Bullish",
    "bullish_ensemble.py": "Ensemble_Bullish",
    "flat_neural_network.py": "Neural_Flat",
    "flat_ensemble.py": "Ensemble_Flat",
    "bearish_neural_network.py": "Neural_Bearish",
    "bearish_ensemble.py": "Ensemble_Bearish"
}

# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—ë–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏,
# –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è.
# –ò–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç–∏, –µ—Å–ª–∏ –≤–∞—à–∏ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö.
EXPECTED_RESULTS = {
    "Market_Classifier": {
        "files": ["market_condition_classifier.h5", "scaler.pkl"],
        "dirs": ["checkpoints/market_condition_classifier"]
    },
    "Neural_Bullish": {
        "files": ["bullish_nn_model.h5"],
        "dirs": ["checkpoints/bullish_neural_network"]
    },
    "Ensemble_Bullish": {
        "files": [os.path.join("models", "bullish_stacked_ensemble_model.pkl")],
        "dirs": ["checkpoints/bullish"]
    },
    "Neural_Flat": {
        "files": ["flat_nn_model.h5"],
        "dirs": ["checkpoints/flat_neural_network"]
    },
    "Ensemble_Flat": {
        "files": [os.path.join("models", "flat_stacked_ensemble_model.pkl")],
        "dirs": ["checkpoints/flat"]
    },
    "Neural_Bearish": {
        "files": ["bearish_nn_model.h5"],
        "dirs": ["checkpoints/bearish_neural_network"]
    },
    "Ensemble_Bearish": {
        "files": [os.path.join("models", "bearish_stacked_ensemble_model.pkl")],
        "dirs": ["checkpoints/bearish"]
    },
}

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
REQUIRED_PACKAGES = [
    "numpy", "pandas", "matplotlib", "scipy",
    "tensorflow[and-cuda]==2.12.0", "tensorflow-addons",
    "scikit-learn", "imbalanced-learn", "xgboost", "catboost", "lightgbm",
    "joblib", "ta", "pandas-ta", "python-binance", "filterpy", "requests"
]

# -----------------------------------------------------------------------------
# 2. –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------------------------------------------------------

def install_packages():
    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    # –û–±–Ω–æ–≤–ª—è–µ–º pip –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º numpy –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "numpy"], check=False)
    subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "numpy==1.23.5"], check=True)
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å tensorflow (–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, tensorflow-cpu)
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "tensorflow"], check=True)
    except subprocess.CalledProcessError:
        print("‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ tensorflow, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tensorflow-cpu...")
        subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "tensorflow-cpu"], check=True)
    
    for package in REQUIRED_PACKAGES:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", package], check=True)
        except subprocess.CalledProcessError:
            print(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {package}")

def check_gpu():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    try:
        output = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if output.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(output.stdout)
        else:
            print("‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ CPU.")
    except FileNotFoundError:
        print("‚ö† nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

def ensure_directory(path):
    os.makedirs(path, exist_ok=True)

def copy_results(model_logical_name):
    """
    –î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ –∫–æ–ø–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏ –∏–∑
    —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ü–µ–ª–µ–≤—ã–µ –ø–∞–ø–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ RunPod).
    """
    expected = EXPECTED_RESULTS.get(model_logical_name, {})
    files = expected.get("files", [])
    dirs = expected.get("dirs", [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ (–∞–Ω—Å–∞–º–±–ª—å –∏–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å)
    if "Ensemble" in model_logical_name:
        local_base = ENSEMBLE_MODELS_DIR
    else:
        local_base = NEURAL_NETWORKS_DIR

    local_target = os.path.join(local_base, model_logical_name)
    ensure_directory(local_target)
    ensure_directory(RUNPOD_SAVE_DIR)
    runpod_target = os.path.join(RUNPOD_SAVE_DIR, model_logical_name)
    ensure_directory(runpod_target)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for f in files:
        if os.path.exists(f):
            try:
                shutil.copy(f, local_target)
                shutil.copy(f, runpod_target)
                print(f"‚úÖ –§–∞–π–ª {f} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {local_target} –∏ {runpod_target}")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {f}: {e}")
        else:
            print(f"‚ö† –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
    for d in dirs:
        if os.path.exists(d):
            dest_local = os.path.join(local_target, os.path.basename(d))
            dest_runpod = os.path.join(runpod_target, os.path.basename(d))
            try:
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if os.path.exists(dest_local):
                    shutil.rmtree(dest_local, onerror=on_rm_error)
                shutil.copytree(d, dest_local)
                if os.path.exists(dest_runpod):
                    shutil.rmtree(dest_runpod, onerror=on_rm_error)
                shutil.copytree(d, dest_runpod)
                print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ {d} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {dest_local} –∏ {dest_runpod}")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ {d}: {e}")
        else:
            print(f"‚ö† –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {d}")

def on_rm_error(func, path, exc_info):
    try:
        os.chmod(path, 0o777)
        func(path)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")

# -----------------------------------------------------------------------------
# 3. –õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
# -----------------------------------------------------------------------------

def run_training_scripts():
    """
    –ü–æ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–∂–¥—ã–π –æ–±—É—á–∞—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –∏–∑ MODELS,
    –∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã –∫–æ–ø–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    for script, model_name in MODELS.items():
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ: {script} ({model_name})")
        try:
            subprocess.run(["python", script], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script}: {e}")
            continue
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        time.sleep(5)
        print(f"üì• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {model_name}...")
        copy_results(model_name)

# -----------------------------------------------------------------------------
# 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–º RunPod (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# -----------------------------------------------------------------------------

def stop_and_remove_pod():
    if not RUNPOD_API_KEY or not POD_ID:
        print("‚ö† RUNPOD_API_KEY –∏–ª–∏ POD_ID –Ω–µ –∑–∞–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–¥–∞.")
        return
    
    print("\nüîß –†–∞–±–æ—Ç–∞–µ–º —Å RunPod...")
    try:
        subprocess.run(["pip", "install", "runpod"], check=True)
    except subprocess.CalledProcessError:
        print("‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ runpod CLI, –ø–æ–¥ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    
    try:
        response = requests.get(
            "https://api.runpod.io/v2/pod/list",
            headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
        )
        pods = response.json()
        if "pods" in pods and pods["pods"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥ —Å ID: {POD_ID}")
            requests.post(
                f"https://api.runpod.io/v2/pod/{POD_ID}/stop",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            requests.delete(
                f"https://api.runpod.io/v2/pod/{POD_ID}",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} —É–¥–∞–ª—ë–Ω.")
        else:
            print("‚ö† –ü–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π POD_ID.")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ RunPod: {e}")

# -----------------------------------------------------------------------------
# 5. –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
# -----------------------------------------------------------------------------

def main():
    install_packages()
    check_gpu()
    run_training_scripts()
    stop_and_remove_pod()
    print("\nüéâ –í—Å–µ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ RunPod!")

if __name__ == "__main__":
    main()
