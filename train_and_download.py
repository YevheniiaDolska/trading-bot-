#!/usr/bin/env python3
import os
import subprocess
import sys
import time
import requests
import shutil
import glob
import logging

# POD_ID –∑–∞–¥–∞—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é
POD_ID = "YOUR_POD_ID_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π POD_ID

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á RunPod –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")
if not RUNPOD_API_KEY:
    print("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ export RUNPOD_API_KEY=...")
    sys.exit(1)

print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POD_ID: {POD_ID}")

# –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ (–ø–∞–ø–∫–∞ Ready)
BASE_LOCAL_DIR = r"C:\Users\Kroha\Documents\trading-models\Ready"
NEURAL_NETWORKS_DIR = os.path.join(BASE_LOCAL_DIR, "neural_networks")
ENSEMBLE_MODELS_DIR = os.path.join(BASE_LOCAL_DIR, "ensemble_models")
os.makedirs(NEURAL_NETWORKS_DIR, exist_ok=True)
os.makedirs(ENSEMBLE_MODELS_DIR, exist_ok=True)

# –ü—É—Ç–∏, –≥–¥–µ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ OUTPUT_DIR)
MODELS_DIR = os.path.join(BASE_LOCAL_DIR, "models", "neural_networks")
OUTPUT_DIR = os.path.join(BASE_LOCAL_DIR, "output", "neural_networks")
os.makedirs(MODELS_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Google Drive: –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π (—É –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏–π –¥–æ—Å—Ç—É–ø)
GDRIVE_FOLDER_ID = "1JCoUN-wQ2iIk5D6DiUoTj9PhS44lTnAp"

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫ –µ—Å—Ç—å)
REQUIRED_PACKAGES = [
    "numpy", "pandas", "matplotlib", "scipy", "tensorflow[and-cuda]==2.12.0", "tensorflow-addons",
    "scikit-learn", "imbalanced-learn", "xgboost", "catboost", "lightgbm", "joblib",
    "ta", "pandas-ta", "python-binance", "filterpy", "requests", "PyDrive"
]

def install_packages():
    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "numpy"], check=False)
    subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "numpy==1.23.5"], check=True)
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "tensorflow"], check=True)
    except subprocess.CalledProcessError:
        print("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TensorFlow, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tensorflow-cpu...")
        subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "tensorflow-cpu"], check=True)
    for package in REQUIRED_PACKAGES:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", package], check=True)
        except subprocess.CalledProcessError:
            print(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {package}")

def check_gpu():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    try:
        output = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if output.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(output.stdout)
        else:
            print("‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ CPU.")
    except FileNotFoundError:
        print("‚ö† nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

check_gpu()


def ensure_directory(path):
    os.makedirs(path, exist_ok=True)

# –ú–æ–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –∏–º—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ -> –∏–º—è –º–æ–¥–µ–ª–∏ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–æ–∫)
MODELS = {
    "market_condition_classifier.py": "Market_Classifier",
    "bullish_neural_network.py": "Neural_Bullish",
    "bullish_ensemble.py": "Ensemble_Bullish",
    "flat_neural_network.py": "Neural_Flat",
    "flat_ensemble.py": "Ensemble_Flat",
    "bearish_neural_network.py": "Neural_Bearish",
    "bearish_ensemble.py": "Ensemble_Bearish"
}

def train_models():
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    drive = get_drive()
    for model_file, model_name in MODELS.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–æ–¥–µ–ª—å
        if "ensemble" in model_name:
            parent_dir = ENSEMBLE_MODELS_DIR
        else:
            parent_dir = NEURAL_NETWORKS_DIR
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
        model_folder = os.path.join(parent_dir, model_name)
        os.makedirs(model_folder, exist_ok=True)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ OUTPUT_DIR —Å –∏–º–µ–Ω–µ–º {model_name}.h5
        trained_model_path = os.path.join(OUTPUT_DIR, f"{model_name}.h5")
        local_model_path = os.path.join(model_folder, f"{model_name}.h5")
        if os.path.exists(trained_model_path):
            print(f"üì• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name} –≤ {local_model_path}...")
            try:
                subprocess.run(["cp", trained_model_path, local_model_path], check=True)
                print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {local_model_path}!")
                # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ Google Drive.
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –Ω–∞ Google Drive –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã:
                if "Ensemble" in model_name:
                    drive_parent_name = "ensemble_models"
                else:
                    drive_parent_name = "neural_networks"
                # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É drive_parent_name –≤ GDRIVE_FOLDER_ID
                query = f"'{GDRIVE_FOLDER_ID}' in parents and title = '{drive_parent_name}' and trashed=false"
                drive_parent_list = drive.ListFile({'q': query}).GetList()
                if drive_parent_list:
                    drive_parent_id = drive_parent_list[0]['id']
                else:
                    folder_metadata = {
                        'title': drive_parent_name,
                        'mimeType': 'application/vnd.google-apps.folder',
                        'parents': [{'id': GDRIVE_FOLDER_ID}]
                    }
                    folder = drive.CreateFile(folder_metadata)
                    folder.Upload()
                    drive_parent_id = folder['id']
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {drive_parent_name} –Ω–∞ Google Drive.")
                # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
                query = f"'{drive_parent_id}' in parents and title = '{model_name}' and trashed=false"
                model_folder_list = drive.ListFile({'q': query}).GetList()
                if model_folder_list:
                    drive_model_folder_id = model_folder_list[0]['id']
                else:
                    folder_metadata = {
                        'title': model_name,
                        'mimeType': 'application/vnd.google-apps.folder',
                        'parents': [{'id': drive_parent_id}]
                    }
                    folder = drive.CreateFile(folder_metadata)
                    folder.Upload()
                    drive_model_folder_id = folder['id']
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} –Ω–∞ Google Drive.")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ Google Drive
                upload_file_to_drive(local_model_path, drive_model_folder_id, drive)
            except subprocess.CalledProcessError:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_file}")
        else:
            print(f"‚ö† –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {trained_model_path}")

train_models()

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∞ –Ω–∞ RunPod
if RUNPOD_API_KEY:
    print("\nüîß –†–∞–±–æ—Ç–∞–µ–º —Å RunPod...")
    try:
        subprocess.run(["pip", "install", "runpod"], check=True)
    except subprocess.CalledProcessError:
        print("‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ runpod CLI, –ø–æ–¥ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        sys.exit(1)
    try:
        response = requests.get(
            "https://api.runpod.io/v2/pod/list",
            headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
        )
        pods = response.json()
        if "pods" in pods and pods["pods"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥ —Å ID: {POD_ID}")
            requests.post(
                f"https://api.runpod.io/v2/pod/{POD_ID}/stop",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            requests.delete(
                f"https://api.runpod.io/v2/pod/{POD_ID}",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} —É–¥–∞–ª—ë–Ω.")
        else:
            print("‚ö† –ü–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ RunPod: {e}")

print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å–∫–∞—á–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ Google Drive!")
